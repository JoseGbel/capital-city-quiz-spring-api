buildscript {
    ext {
        kotlinVersion = '1.3.70'
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    }
}

plugins {
    id 'base'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.71'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.71"
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.71'
    id 'com.palantir.docker' version '0.22.1'
    id 'com.palantir.docker-run' version '0.22.1'
    id 'pl.allegro.tech.build.axion-release' version '1.11.0'
    id 'jp.classmethod.aws.cloudformation' version '0.41'
}

project.version = scmVersion.version

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'josegbel'
String imageName = "$dockerHubUsernameProperty/sample-spring-kotlin:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name "${project.name}"
    image imageName
    ports '8080:8080'
    clean true
    daemonize false
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

repositories {
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.postgresql:postgresql'
    implementation 'com.auth0:java-jwt:3.4.0'

    // Testings
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation 'com.jayway.jsonpath:json-path:2.2.0'

    // Local database not being used atm
    // implementation group: 'com.h2database', name: 'h2', version: '1.3.148'
}

application {
    mainClassName = 'sample.kotlin.spring.CapitalCityQuizAPI'
}

test{
    useJUnitPlatform()
}

cloudFormation {
        stackName "$project.name-stack"
        stackParams([
                SubnetID: findProperty('subnetId') ?: '',
                ServiceName: project.name,
                ServiceVersion: project.version,
                DockerHubUsername: dockerHubUsernameProperty
        ])
        templateFile project.file("ecs.yml")
}